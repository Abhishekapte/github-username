{"version":3,"sources":["components/App.js","components/Search.js","components/User.js","index.js"],"names":["App","react_default","a","createElement","className","this","props","children","React","Component","Search","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_handleSubmit","bind","assertThisInitialized","e","preventDefault","history","push","concat","refs","userInput","value","onSubmit","ref","type","User","state","_this2","fetch","params","username","then","response","json","user","setState","stat","key","name","react_router_dom","to","url","stats","public_repos","followers","following","login","src","avatar_url","alt","bio","map","renderStat","routes","react_router","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42066be7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n/*\r\nThis is the layout component. It's displayed by the top-level Route\r\nthis.props.children will correspond to the current URL's component.\r\nIf the URL is only / then the IndexRoute's component will be the child (Search component)\r\nIf the URL is /user/:username then the User component will be displayed.\r\n*/\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"main-app\">\r\n                <header className=\"main-header\">\r\n                    <h1>React GitHub Project</h1>\r\n                </header>\r\n                <main className=\"main-content\">\r\n                    {this.props.children}\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\n//import { withRouter  } from 'react-router-dom';\r\n\r\n/*\r\nThis component displays a form where the user can enter a GitHub username\r\nWhen they submit the form either by pressing ENTER or clicking the button,\r\nwe will use react-router's history.push function to push a new URL to the history.\r\nThis will have as an effect to navigate to a new URL, which will display the User component\r\nWhy are we doing this instead of using a <Link>? The answer is straightforward, but make sure you understand!!!\r\n*/\r\nclass Search extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Why do we need to do this?? Make sure you understand!!!\r\n        this._handleSubmit = this._handleSubmit.bind(this);\r\n    }\r\n    _handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.history.push(`/user/${this.refs.userInput.value}`)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-page\">\r\n                <h2>Enter a GitHub username</h2>\r\n                <form onSubmit={this._handleSubmit}>\r\n                    <input ref=\"userInput\" className=\"search-page__input\" type=\"text\" />\r\n                    <button  className=\"search-page__button\">Search</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Search;  ","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass User extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {};\r\n    }\r\n\r\n    /*\r\n    This method will be called by React after the first render. It's a perfect place to load\r\n    data with AJAX. This User component gets mounted in the DOM as soon as the URL is /user/:username\r\n    When that happens, react-router will pass a `params` prop containing every parameter in the URL, just like\r\n    when we get URL parameters in Express with req.params. Here, it's this.props.params. Since we called our route\r\n    parameter `username`, it's available under this.props.params.username\r\n    We're using it to make an API call to GitHub to fetch the user data for the username in the URL. Once we receive\r\n    the data -- in the callback -- we call `setState` to put the user data in our state. This will trigger a re-render.\r\n    When `render` gets called again, `this.state.user` exists and we get the user info display instead of \"LOADING...\"\r\n    */\r\n    componentDidMount() {\r\n        fetch(`https://api.github.com/users/${this.props.params.username}`)\r\n        .then(response => response.json())\r\n        .then(\r\n            user => {\r\n                // How can we use `this` inside a callback without binding it??\r\n                // Make sure you understand this fundamental difference with arrow functions!!!\r\n                this.setState({\r\n                    user: user\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    /*\r\n    This method is used as a mapping function. Eventually this could be factored out to its own component.\r\n    */\r\n    renderStat(stat) {\r\n        return (\r\n            <li key={stat.name} className=\"user-info__stat\">\r\n                <Link to={stat.url}>\r\n                    <p className=\"user-info__stat-value\">{stat.value}</p>\r\n                    <p className=\"user-info__stat-name\">{stat.name}</p>\r\n                </Link>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        // If the state doesn't have a user key, it means the AJAX didn't complete yet. Simply render a LOADING indicator.\r\n        if (!this.state.user) {\r\n            return (<div className=\"user-page\">LOADING...</div>);\r\n        }\r\n\r\n        /// If we get to this part of `render`, then the user is loaded\r\n        const user = this.state.user;\r\n\r\n        // Gather up some number stats about the user, to be used in a map below\r\n        const stats = [\r\n            {\r\n                name: 'Public Repos',\r\n                value: user.public_repos,\r\n                url: `/user/${this.props.params.username}/repos`\r\n            },\r\n            {\r\n                name: 'Followers',\r\n                value: user.followers,\r\n                url: `/user/${this.props.params.username}/followers`\r\n            },\r\n            {\r\n                name: 'Following',\r\n                value: user.following,\r\n                url: `/user/${this.props.params.username}/following`\r\n            }\r\n        ];\r\n\r\n        // Look in index.css for the styles that make this look like it does\r\n        return (\r\n            <div className=\"user-page\">\r\n                <div className=\"user-info\">\r\n                    <Link className=\"user-info__text\" to={`/user/${user.login}`}>\r\n                        <img className=\"user-info__avatar\" src={user.avatar_url} alt={`${user.login} avatar`}/>\r\n                        <h2 className=\"user-info__title\">{user.login} ({user.name})</h2>\r\n                        <p className=\"user-info__bio\">{user.bio}</p>\r\n                    </Link>\r\n\r\n                    <ul className=\"user-info__stats\">\r\n                        {stats.map(this.renderStat)}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default User;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Router, Route, IndexRoute, BrowserRouter } from 'react-router-dom';\n\nimport App from './components/App';\nimport Search from './components/Search';\nimport User from './components/User';\n\n/*\nRendering a router will output the right component tree based on the current URL.\nNested routes' components will be passed down to the parent as `this.props.children`\nIf the URL is /, then <App/> will be rendered, and this.props.children will be <Search/> (this is the IndexRoute)\nIf the URL is /user/ziad-saab then <App/> will be rendered, and this.props.children will be <User/>\nThe <User/> instance will be passed a prop called `params`. It will be an object with `{username: 'ziad-saab'}`\n*/\nconst routes = (\n    <BrowserRouter>\n        <div>\n            <Route path=\"/\" component={App} />\n            <Route path=\"/\" component={Search}/>\n            <Route path=\"user/:username\" component={User} />\n        </div>\n    </BrowserRouter>\n);\n\nReactDOM.render(routes, document.getElementById('root'));"],"sourceRoot":""}